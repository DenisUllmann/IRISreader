
from scipy.io import readsav
from irisreader import observation
import numpy as np

# headers that are too hard to check, are deliberately not generated by irisreader or are deliberately changed by irisreader
# LUTIDF and DSCRFIX are badly read because SUMSPTRN is omitted in iris_l2_strtemplate.pro
headers_to_exclude_sji = ['HISTORY', 'COMMENT', 'EXTEND', 'SIMPLE', 'KEYWDDOC', 'TOTDN']
headers_to_exclude_raster = ['HISTORY', 'COMMENT', 'EXTEND', 'SIMPLE', 'KEYWDDOC', 'BITPIX', 'NAXIS', 'OBS_DESC', 'EXPTIME', 'CRVAL2', 'XCEN', 'YCEN', 'LUTIDF', 'DSRCFIX']

def read_saved_headers( filename ):
   sav_data = readsav( filename ).header
   headers = []
   for entry in sav_data:
      keys = entry.dtype.names
      data = entry
      headers.append( dict( zip( keys, data ) ) )
      
   return headers

def header_regression_test( irisreader_headers, idl_headers, headers_to_exclude, output=False ):
   if output: print( ">>>>>>>>>>>>>>>>>>> Regression Test <<<<<<<<<<<<<<<<<<<" )

   # check whether we have the same number of timesteps   
   if len(idl_headers) != len(irisreader_headers):
      raise ValueError("The specified files do not contain the same number of timesteps!")
      
   # check which headers are not covered by irisreader
   if output: print("\n\n----- Checking for missing headers -----")
   for i in range( len(idl_headers) ):
      diff = list(set(idl_headers[i].keys()) - set(irisreader_headers[i].keys()) - set(headers_to_exclude) )
      if len(diff) > 0:
         if output: print( "Step " + str(i) + ": Header difference", diff )
         else: raise ValueError("The following headers are not contained in irisreader: ", diff )
   
   # append the headers that were not present to headers_to_exclude - otherwise the next step would throw an error
   for header in diff:      
      headers_to_exclude.append( header )   
      
   # check values differences
   if output: print("\n\n----- Checking for value differences -----")
   for i in range( len(idl_headers) ):
      for key in list( set(idl_headers[i].keys()) - set(headers_to_exclude) ):
      
         if isinstance( irisreader_headers[i][key], (int, float, np.int16, np.int32, np.float32, np.float64, bool) ):
            if np.float32( idl_headers[i][key] ) - np.float32( irisreader_headers[i][key] ) != 0:
               if output: print( i,'numeric',  key, idl_headers[i][key], irisreader_headers[i][key] )
               else: raise ValueError("The following headers do not match: ", i, key, idl_headers[i][key], irisreader_headers[i][key] )
               
         elif isinstance( irisreader_headers[i][key], str ):
            if not isinstance( idl_headers[i][key], str ):
                idl_headers[i][key] = idl_headers[i][key].decode()
                
            if idl_headers[i][key][:65] != irisreader_headers[i][key][:65]: # IDL cuts after 65 characters..
               if output: print( i, 'str', key, idl_headers[i][key] , irisreader_headers[i][key] )
               else: raise ValueError("The following headers do not match: ", i, key, idl_headers[i][key], irisreader_headers[i][key] )

         else:
            if output: print( i, key, idl_headers[i][key], irisreader_headers[i][key], type(idl_headers[i][key]), type(irisreader_headers[i][key]), "type not recognized" )
            else: raise ValueError("Type not recognized: ", i, key, idl_headers[i][key], irisreader_headers[i][key], type(idl_headers[i][key]), type(irisreader_headers[i][key] ) )
            
   if output: print("\n\n")
   
   return True


if __name__ == "__main__":
    
    # load observation
    obs = observation( "../data/20140518_151415_3820607204", keep_null=True )
    
    # SJI File
    irisreader_headers = obs.sji[0].headers
    idl_headers = read_saved_headers( '../data/sji_headers.sav'  )
    header_regression_test( irisreader_headers, idl_headers, headers_to_exclude_sji, output=True )
   
    # Combined raster (all three lines)
    irisreader_headers = obs.raster[0].headers
    idl_headers = read_saved_headers( '../data/raster1_headers_ext0.sav'  ) + read_saved_headers( "../data/raster2_headers_ext0.sav" )
    header_regression_test( irisreader_headers, idl_headers, headers_to_exclude_raster, output=True )
   
    irisreader_headers = obs.raster[1].headers
    idl_headers = read_saved_headers( '../data/raster1_headers_ext1.sav'  ) + read_saved_headers( "../data/raster2_headers_ext1.sav" )
    header_regression_test( irisreader_headers, idl_headers, headers_to_exclude_raster, output=True )
  
    irisreader_headers = obs.raster[2].headers
    idl_headers = read_saved_headers( '../data/raster1_headers_ext2.sav'  ) + read_saved_headers( "../data/raster2_headers_ext2.sav" )
    header_regression_test( irisreader_headers, idl_headers, headers_to_exclude_raster, output=True )
  